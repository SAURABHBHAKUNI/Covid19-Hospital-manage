
To create a COVID-19 Hospital Management System project in Django, here’s a guide on setting up the project from scratch. I’ll walk you through creating the project, setting up Django models, views, templates, and configuration files for this hospital management system.

This is an advanced guide that assumes you have Python and Django installed. If not, install them first.

Step 1: Install Django and Create the Project
Install Django (if not already installed):

bash
Copy code
pip install django
Create the Django project:

bash
Copy code
django-admin startproject covid_hospital_management
cd covid_hospital_management
Start a Django app for hospital management:

bash
Copy code
python manage.py startapp hospital
Step 2: Configure the Project
Register the app in covid_hospital_management/settings.py by adding 'hospital' to INSTALLED_APPS:

python
Copy code
INSTALLED_APPS = [
    # Django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Hospital management app
    'hospital',
]
Set up database (in the same file, settings.py). By default, Django uses SQLite, which is fine for development. However, if you plan to deploy this project, consider using PostgreSQL or MySQL.

Step 3: Define Models in hospital/models.py
Create models to represent patients, doctors, and hospital records.

python
Copy code
from django.db import models
from django.contrib.auth.models import User

class Doctor(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    specialization = models.CharField(max_length=100)
    phone = models.CharField(max_length=15)

    def __str__(self):
        return f"Dr. {self.user.first_name} {self.user.last_name} - {self.specialization}"

class Patient(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.CharField(max_length=10)
    admitted_on = models.DateTimeField(auto_now_add=True)
    discharged_on = models.DateTimeField(null=True, blank=True)
    doctor = models.ForeignKey(Doctor, on_delete=models.SET_NULL, null=True)

    def __str__(self):
        return f"{self.name} (Age: {self.age})"

class Appointment(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE)
    date = models.DateTimeField()
    reason = models.TextField()

    def __str__(self):
        return f"Appointment for {self.patient.name} with Dr. {self.doctor.user.last_name} on {self.date}"
Step 4: Migrate the Models to the Database
After defining the models, run the following commands to create the tables in the database:

bash
Copy code
python manage.py makemigrations
python manage.py migrate
Step 5: Create an Admin Interface for the Models
Register models in hospital/admin.py:

python
Copy code
from django.contrib import admin
from .models import Doctor, Patient, Appointment

admin.site.register(Doctor)
admin.site.register(Patient)
admin.site.register(Appointment)
Create a superuser to access the Django admin panel:

bash
Copy code
python manage.py createsuperuser
Follow the prompts to set up an admin user.

Run the server and access the admin panel at http://127.0.0.1:8000/admin:

bash
Copy code
python manage.py runserver
Step 6: Create Views in hospital/views.py
Define views to handle requests for patient and doctor management, such as creating appointments and listing patients.

python
Copy code
from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import Patient, Doctor, Appointment

def home(request):
    return render(request, 'hospital/home.html')

def doctors_list(request):
    doctors = Doctor.objects.all()
    return render(request, 'hospital/doctors_list.html', {'doctors': doctors})

def patients_list(request):
    patients = Patient.objects.all()
    return render(request, 'hospital/patients_list.html', {'patients': patients})

def book_appointment(request, doctor_id):
    if request.method == 'POST':
        patient_name = request.POST['patient_name']
        reason = request.POST['reason']
        patient = Patient.objects.get(name=patient_name)
        doctor = Doctor.objects.get(id=doctor_id)
        Appointment.objects.create(patient=patient, doctor=doctor, reason=reason)
        return redirect('patients_list')
    else:
        doctor = Doctor.objects.get(id=doctor_id)
        return render(request, 'hospital/book_appointment.html', {'doctor': doctor})
Step 7: Configure URLs in hospital/urls.py and covid_hospital_management/urls.py
Create hospital/urls.py:

python
Copy code
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('doctors/', views.doctors_list, name='doctors_list'),
    path('patients/', views.patients_list, name='patients_list'),
    path('book-appointment/<int:doctor_id>/', views.book_appointment, name='book_appointment'),
]
Include hospital/urls.py in the main urls.py: Edit covid_hospital_management/urls.py:

python
Copy code
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('hospital.urls')),
]
Step 8: Create Templates
Create a templates folder in the hospital app directory, and add HTML files for each view, like home.html, doctors_list.html, and patients_list.html.

Sample template files:

home.html:

html
Copy code
<h1>Welcome to the COVID-19 Hospital Management System</h1>
<a href="{% url 'doctors_list' %}">View Doctors</a>
<a href="{% url 'patients_list' %}">View Patients</a>
doctors_list.html:

html
Copy code
<h2>Doctors List</h2>
<ul>
    {% for doctor in doctors %}
        <li>{{ doctor.user.get_full_name }} - {{ doctor.specialization }}</li>
    {% endfor %}
</ul>
patients_list.html:

html
Copy code
<h2>Patients List</h2>
<ul>
    {% for patient in patients %}
        <li>{{ patient.name }} - Age: {{ patient.age }}</li>
    {% endfor %}
</ul>
book_appointment.html:

html
Copy code
<h2>Book Appointment with Dr. {{ doctor.user.get_full_name }}</h2>
<form method="post">
    {% csrf_token %}
    <label>Patient Name:</label>
    <input type="text" name="patient_name" required>
    <label>Reason:</label>
    <textarea name="reason" required></textarea>
    <button type="submit">Book Appointment</button>
</form>
Step 9: Run the Application
Run the Django development server to test your application:

bash
Copy code
python manage.py runserver
Visit http://127.0.0.1:8000 to view the COVID-19 Hospital Management System in action.

This setup provides a basic hospital management system with views for listing doctors and patients and booking appointments. In a production system, you’d add additional features, security checks, and input validation.











